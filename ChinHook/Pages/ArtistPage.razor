@page "/artist/{ArtistId:long}"
@using Application.ClientModels;
@using Application.Repositories;
@using ChinHook.Shared.Components;
@using Domain.Entities;
@using System.Security.Claims;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-filled"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    [Parameter]
    public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private Modal PlaylistDialog { get; set; }

    private Artist Artist;

    private List<PlaylistTrack> Tracks { get; set; } = new List<PlaylistTrack>();

    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;
    private long ExistingPlayListId;
    private string selectedValue = "1";
    private string NewPlayListName = "";

  
    private List<ExistingPlayList> ExistingPlayLists { get; set; } = new List<ExistingPlayList>();

    [Inject]
    private IArtistRepository artistRepository { get; set; }

    [Inject]
    private ITrackRepository trackRepository { get; set; }

    [Inject]
    private IPlayListRepository playListRepository { get; set; }

    private void OnRadioSelected(string value)
    {
        selectedValue = value;
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();

        Artist = await artistRepository.GetByIdAsync(ArtistId);

        var result = await trackRepository.GetTracksWithAlbumsAsync();

        Tracks = result.Select(t => new PlaylistTrack()
                {
                    AlbumTitle = (t.Album == null ? "-" : t.Album.Title),
                    TrackId = t.TrackId,
                    TrackName = t.Name,
                    IsFavorite = t.Playlists.Where(p => p.UserPlaylists.Any(up => up.UserId == CurrentUserId && up.Playlist.Name == "Favorites")).Any()
                })
            .ToList();
    }

    public void FavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        trackRepository.SaveTrackToPlayListAsync(CurrentUserId, trackId, "Favorites");
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
    }

    public void UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    public async void OpenPlaylistDialog(long trackId)
    {
        var result = await playListRepository.GetUserPlayListAsync(CurrentUserId);

        ExistingPlayLists = result.Select(t => new ExistingPlayList()
            {
                PlaylistId = t.PlaylistId,
                Name = t.Name
            }).ToList();

        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    public void AddTrackToPlaylist()
    {
        CloseInfoMessage();
        trackRepository.SaveTrackToPlayListAsync(CurrentUserId, SelectedTrack.TrackId, NewPlayListName);
        InfoMessage = $"Track {Artist.Name} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {{playlist name}}.";
        PlaylistDialog.Close();
    }

    public void CloseInfoMessage()
    {
        InfoMessage = "";
    }
}


<Modal @ref="PlaylistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div>
            <label>
                <input type="radio" name="options" value="1" checked=@(selectedValue == "1") @onchange="@(()=> OnRadioSelected("1"))" /> Add to Existing
            </label>

            <label>
                <input type="radio" name="options" value="2" checked=@(selectedValue == "2") @onchange="@(()=> OnRadioSelected("2"))" /> Create New
            </label>
        </div>

        @if(@selectedValue=="1"){
        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
                <select class="form-control" id="ExistingPlaylist" @bind="ExistingPlayListId">
                    <option value="">Select an item</option>
                    @foreach (var item in ExistingPlayLists)
                    {
                        <option value="@item.PlaylistId">@item.Name</option>
                    }
            </select>
        </div>
        }
        else{
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
                <input type="text" id="NewPlaylist" class="form-control" @bind="NewPlayListName" placeholder="Name for the new playlist">
        </div>
        }
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>
