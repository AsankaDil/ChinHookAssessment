@page "/favourite"
@using Application.ClientModels;
@using Application.Repositories;
@using ChinHook.Shared.Components;
@using Domain.Entities;
@using System.Security.Claims;
@using System.Linq;

@if (UserFavouriteTracks == null)
{
    <Loading />
}
else
{
    <h1>Favourites</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in UserFavouriteTracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    [Parameter]
    public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    public List<PlaylistTrack> UserFavouriteTracks { get; set; } = new List<PlaylistTrack>();

    public PlaylistTrack SelectedTrack;
    public string InfoMessage;
    public string CurrentUserId;

    [Inject]
    public IArtistRepository artistRepository { get; set; }


    [Inject]
    public ITrackRepository trackRepository { get; set; }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();

        var result = await trackRepository.GetFavouriteTracksAsync(CurrentUserId);
        UserFavouriteTracks = result.Select(t => new PlaylistTrack()
                {
                    AlbumTitle = (t.Album == null ? "-" : t.Album.Title),
                    TrackId = t.TrackId,
                    TrackName = t.Name,
                })
            .ToList();
    }

}

